<?php
/*
 * citeproc-php
 *
 * @link        http://github.com/seboettg/citeproc-php for the source repository
 * @copyright   Copyright (c) 2016 Sebastian BÃ¶ttger.
 * @license     https://opensource.org/licenses/MIT
 */

namespace Seboettg\CiteProc\Test\Rendering;

use Seboettg\CiteProc\Config\RenderingMode as Mode;
use PHPUnit\Framework\TestCase;
use Seboettg\CiteProc\CiteProc;
use Seboettg\CiteProc\Context;
use Seboettg\CiteProc\Exception\InvalidStylesheetException;
use Seboettg\CiteProc\Locale\Locale;
use Seboettg\CiteProc\Config;
use Seboettg\CiteProc\Rendering\Group;
use Seboettg\CiteProc\Test\TestSuiteTestCaseTrait;
use SimpleXMLElement;

class GroupTest extends TestCase
{
    use TestSuiteTestCaseTrait;

    private $data = "{\"title\":\"Ein Buch\", \"URL\":\"http://foo.bar\"}";

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $context = new Context();
        $context->setMode(Mode::BIBLIOGRAPHY());
        $context->setLocale(new Locale(Config\Locale::DE_DE()));
        CiteProc::setContext($context);
    }

    /**
     * @throws InvalidStylesheetException
     */
    public function testRenderDelimiter()
    {
        $str = '<group delimiter=" "><text term="retrieved"/><text term="from"/><text variable="URL"/></group>';
        $group = Group::factory(new SimpleXMLElement($str));
        $this->assertEquals("abgerufen von http://foo.bar", $group->render(json_decode($this->data)));
    }

    /**
     * @throws InvalidStylesheetException
     */
    public function testRenderAffixes()
    {
        $str = '<group prefix="[" suffix="]" delimiter=" "><text term="retrieved"/><text term="from"/><text variable="URL"/></group>';
        $group = Group::factory(new SimpleXMLElement($str));
        $this->assertEquals("[abgerufen von http://foo.bar]", $group->render(json_decode($this->data)));
    }

    /**
     * @throws InvalidStylesheetException
     */
    public function testRenderDisplay()
    {
        $str = '<group display="indent" prefix="[" suffix="]" delimiter=" "><text term="retrieved"/><text term="from"/><text variable="URL"/></group>';
        $group = Group::factory(new SimpleXMLElement($str));
        $this->assertEquals("<div class=\"csl-indent\">[abgerufen von http://foo.bar]</div>", $group->render(json_decode($this->data)));
    }


    public function testGroupComplexNesting()
    {
        $this->runTestSuite("group_ComplexNesting");
    }

    public function testGroupShortOutputOnly()
    {
        $this->runTestSuite("group_ShortOutputOnly");
    }

    public function testGroupDelimiter()
    {
        $this->runTestSuite("group_Delimiter");
    }

    public function testSuppressTermWhenNoOutputFromPartialDate()
    {
        //TODO: implement
        $this->runTestSuite("group_SuppressTermWhenNoOutputFromPartialDate");
    }

    public function testGroupSuppressValueWithEmptySubgroup()
    {
        //TODO: implement
        $this->runTestSuite("group_SuppressValueWithEmptySubgroup");
    }

    /*
    public function testGroupSuppressWithEmptyNestedDateNode()
    {
        //TODO: implement
        $this->_testRenderTestSuite("group_SuppressWithEmptyNestedDateNode");
    }
    */

    public function testGroupRetrieved()
    {
        $this->runTestSuite("group_retrieved");
    }

    public function testGroupPunctuation()
    {
        $this->runTestSuite('group_punctuation');
    }
}
